## check RecHits event by event
## ./Performance/drawSpectra.exe Configurations/calo/spectra2D.rechit.event.EB.conf <input> <output>.root <output>.png &> <output>.log &
###
##### Cut Configuration #####
#CUTS-END#
##### input Configuration #####
## variables
var.string EVENTSEL = pcollisionEventSelection > 0
var.string EVENTSELPP = pPAprimaryVertexFilter > 0 && pBeamScrapingFilter > 0
var.string EVENTSELPA = pPAprimaryVertexFilter > 0 && pBeamScrapingFilter > 0
## variables for flags
# https://github.com/cms-sw/cmssw/blob/CMSSW_9_0_X/DataFormats/EcalRecHit/interface/EcalRecHit.h#L19-L41
var.string FLAG_GOOD = (flags & (0x1<<0))
var.string FLAG_POORRECO = (flags & (0x1<<1))
var.string FLAG_OOT = (flags & (0x1<<2))     # out of time
var.string FLAG_FAULHW = (flags & (0x1<<3)) # FaultyHardware
var.string FLAG_NOISY = (flags & (0x1<<4))
var.string FLAG_POORCALIB = (flags & (0x1<<5)) 
var.string FLAG_SATURATED = (flags & (0x1<<6)) 
var.string FLAG_DEAD = (flags & (0x1<<10)) 
var.string FLAG_KILLED = (flags & (0x1<<11)) 
var.string FLAG_TPSATURATED = (flags & (0x1<<12))
var.string FLAG_L1SPIKE = (flags & (0x1<<13))
var.string FLAG_GAIN6 = (flags & (0x1<<16))   # kHasSwitchToGain6
var.string FLAG_GAIN1 = (flags & (0x1<<17))   # kHasSwitchToGain1
## variables for flags - END
var.string FLAGSPLITTER = {1==1,     $FLAG_GOOD$, $FLAG_OOT$,  $FLAG_POORCALIB$, $FLAG_SATURATED$}
var.string FLAGSPLITTERTEXT = {1==1, Good,        Out of time, Poor Calib.,      Saturated}
var.string SELECTIONS = $MLB$ {run == 285993 && event == 879758341 && lumis == 561, 
                               run == 285993 && event == 879101834 && lumis == 561, 
                               run == 285993 && event == 879896473 && lumis == 561 
                              } $MLE$
var.string SELECTIONSTEXT = $SELECTIONS$
var.string SPLITTER = $FLAGSPLITTER$
var.string SPLITTERTEXT = $FLAGSPLITTERTEXT$
##
input.performance.mode = 1     # 0 = TH1D, 1 = TH2D
## TTree
input.performance.treePath = {rechitanalyzer/eb}
input.performance.treeFriendPath = {ggHiNtuplizer/EventTree, hiEvtAnalyzer/HiTree, hltanalysis/HltTree, skimanalysis/HltTree}
input.performance.treeFriendPathIndividual = {}     # ith element in that list is friend only to the ith tree in treePath list
input.performance.treeFormula = {phi:eta}     # formulaY:formulaX
input.performance.treeSelectionBase = $EVENTSELPA$
input.performance.treeSelection = $SELECTIONS$
input.performance.treeSelectionSplitter = $SPLITTER$
input.performance.TH1_weight = {et}
## TH1
input.performance.TH1_title = $SELECTIONSTEXT$
input.performance.TH1_titleX = {ECAL RecHit \eta}
input.performance.TH1_titleY = {ECAL RecHit \phi}
input.performance.TH2D_Bins_List = {60, -3.0, 3.0, 40, -3.1415, 3.1415}  # nBinsx, xLow, xUp, nBinsy, yLow, yUp for a TH2D histogram
input.performance.binsLogScaleX = 0
input.performance.binsLogScaleY = 0
input.performance.titleOffsetX = 1.25  # 1
input.performance.titleOffsetY = 1.25  # 1
input.performance.drawNormalized = 0   # 0, 1, 2
input.performance.drawOption = {colz}      # {colz, ...}
input.performance.markerStyle = {}     # {kFullCircle, kOpenCircle, kFullSquare, kOpenSquare, kDot, kPlus, kStar, ...}
input.performance.markerSize = 1
input.performance.lineStyle = {}       # {kSolid, kDashed, kDotted, kDashDotted}
input.performance.lineWidth = 1        # integer
input.performance.fillStyle = {}       # {kFDotted1, kFDotted3, kFHatched1, kFHatched4, kFWicker, kFBricks, ...}
input.performance.color = {}           # {kBlack, kBlue, kRed, kOrange, kViolet, kCyan, kSpring, kYellow, kAzure, kPink, kGreen, kMagenta, kTeal, ...}
input.performance.fillColor = {}
input.performance.lineColor = {}
## Legend
input.performance.legendEntryLabel = {}
input.performance.legendPosition =     # NE, NW, SE or SW 
input.performance.legendOffsetX =      # 0.04
input.performance.legendOffsetY =      # 0.04
input.performance.legendBorderSize = 0
input.performance.legendWidth = 0
input.performance.legendHeight = 0
input.performance.legendTextSize = 0
##
## TLatex
input.performance.text = {z = E_{T}}
input.performance.textFont = 43
input.performance.textSize = 28
input.performance.textPosition = NE    # NE, NW, SE or SW
input.performance.textOffsetX = 0.04
input.performance.textOffsetY = 0.08
##
## TLatex above Pad
input.performance.textAbovePad = {}          # {CMS Preliminary \sqrt{s_{NN}} = 5.02 TeV;; 404 \mub^{-1} (PbPb)}
input.performance.textAbovePadAlign = {}     # {11, 31} = {left-bottom, right-bottom}
input.performance.textAbovePadFont =         # 43
input.performance.textAbovePadSize =         # 20
input.performance.textAbovePadOffsetX =
input.performance.textAbovePadOffsetY =      # 0.02
##
## TLine
input.performance.TLine_horizontal = {}          # y-axis positions of the horizontal lines to be drawn
input.performance.lineStyle_horizontal = {}      # {kDashed, kSolid, kDotted, kDashDotted}
input.performance.TLine_vertical = {-1.566, -1.4442, 1.4442, 1.566}            # x-axis positions of the vertical lines to be drawn
input.performance.lineStyle_vertical = {kDashed, kDashed, kDashed, kDashed}        # {kDashed, kSolid, kDotted, kDashDotted}
##
## Canvas
input.performance.windowWidth = 800     # current object sizes correspond to a 600x600, might need to resize objects if window size changes
input.performance.windowHeight = 800
input.performance.setLogx = 0        # integer
input.performance.setLogy = 0        # integer
input.performance.setLogz = 0        # integer
input.performance.leftMargin = 0.10
input.performance.rightMargin = 0.15
input.performance.bottomMargin = 0.15
input.performance.topMargin = 0.05
##
#INPUT-END#
